// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: banner.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Banner_CreateBanner_FullMethodName = "/Banner/CreateBanner"
	Banner_DeleteBanner_FullMethodName = "/Banner/DeleteBanner"
	Banner_UpdateBanner_FullMethodName = "/Banner/UpdateBanner"
	Banner_BannerList_FullMethodName   = "/Banner/BannerList"
)

// BannerClient is the client API for Banner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BannerClient interface {
	// 分类
	CreateBanner(ctx context.Context, in *CreateBannerInfo, opts ...grpc.CallOption) (*BannerInfoResponse, error)
	DeleteBanner(ctx context.Context, in *DeleteBannerInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBanner(ctx context.Context, in *UpdateBannerInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BannerList(ctx context.Context, in *BannerInfoRequest, opts ...grpc.CallOption) (*BannerListResponse, error)
}

type bannerClient struct {
	cc grpc.ClientConnInterface
}

func NewBannerClient(cc grpc.ClientConnInterface) BannerClient {
	return &bannerClient{cc}
}

func (c *bannerClient) CreateBanner(ctx context.Context, in *CreateBannerInfo, opts ...grpc.CallOption) (*BannerInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BannerInfoResponse)
	err := c.cc.Invoke(ctx, Banner_CreateBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerClient) DeleteBanner(ctx context.Context, in *DeleteBannerInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Banner_DeleteBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerClient) UpdateBanner(ctx context.Context, in *UpdateBannerInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Banner_UpdateBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerClient) BannerList(ctx context.Context, in *BannerInfoRequest, opts ...grpc.CallOption) (*BannerListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BannerListResponse)
	err := c.cc.Invoke(ctx, Banner_BannerList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannerServer is the server API for Banner service.
// All implementations must embed UnimplementedBannerServer
// for forward compatibility.
type BannerServer interface {
	// 分类
	CreateBanner(context.Context, *CreateBannerInfo) (*BannerInfoResponse, error)
	DeleteBanner(context.Context, *DeleteBannerInfo) (*emptypb.Empty, error)
	UpdateBanner(context.Context, *UpdateBannerInfo) (*emptypb.Empty, error)
	BannerList(context.Context, *BannerInfoRequest) (*BannerListResponse, error)
	mustEmbedUnimplementedBannerServer()
}

// UnimplementedBannerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBannerServer struct{}

func (UnimplementedBannerServer) CreateBanner(context.Context, *CreateBannerInfo) (*BannerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanner not implemented")
}
func (UnimplementedBannerServer) DeleteBanner(context.Context, *DeleteBannerInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanner not implemented")
}
func (UnimplementedBannerServer) UpdateBanner(context.Context, *UpdateBannerInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBanner not implemented")
}
func (UnimplementedBannerServer) BannerList(context.Context, *BannerInfoRequest) (*BannerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BannerList not implemented")
}
func (UnimplementedBannerServer) mustEmbedUnimplementedBannerServer() {}
func (UnimplementedBannerServer) testEmbeddedByValue()                {}

// UnsafeBannerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BannerServer will
// result in compilation errors.
type UnsafeBannerServer interface {
	mustEmbedUnimplementedBannerServer()
}

func RegisterBannerServer(s grpc.ServiceRegistrar, srv BannerServer) {
	// If the following call pancis, it indicates UnimplementedBannerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Banner_ServiceDesc, srv)
}

func _Banner_CreateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBannerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServer).CreateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Banner_CreateBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServer).CreateBanner(ctx, req.(*CreateBannerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banner_DeleteBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBannerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServer).DeleteBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Banner_DeleteBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServer).DeleteBanner(ctx, req.(*DeleteBannerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banner_UpdateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBannerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServer).UpdateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Banner_UpdateBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServer).UpdateBanner(ctx, req.(*UpdateBannerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banner_BannerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServer).BannerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Banner_BannerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServer).BannerList(ctx, req.(*BannerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Banner_ServiceDesc is the grpc.ServiceDesc for Banner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Banner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Banner",
	HandlerType: (*BannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBanner",
			Handler:    _Banner_CreateBanner_Handler,
		},
		{
			MethodName: "DeleteBanner",
			Handler:    _Banner_DeleteBanner_Handler,
		},
		{
			MethodName: "UpdateBanner",
			Handler:    _Banner_UpdateBanner_Handler,
		},
		{
			MethodName: "BannerList",
			Handler:    _Banner_BannerList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banner.proto",
}
