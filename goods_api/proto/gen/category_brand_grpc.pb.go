// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: category_brand.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CategoryBrand_CreateCategoryBrand_FullMethodName = "/CategoryBrand/CreateCategoryBrand"
	CategoryBrand_DeleteCategoryBrand_FullMethodName = "/CategoryBrand/DeleteCategoryBrand"
	CategoryBrand_UpdateCategoryBrand_FullMethodName = "/CategoryBrand/UpdateCategoryBrand"
	CategoryBrand_CategoryBrandList_FullMethodName   = "/CategoryBrand/CategoryBrandList"
	CategoryBrand_GetCategoryBrand_FullMethodName    = "/CategoryBrand/GetCategoryBrand"
)

// CategoryBrandClient is the client API for CategoryBrand service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryBrandClient interface {
	// 分类
	CreateCategoryBrand(ctx context.Context, in *CreateCategoryBrandInfo, opts ...grpc.CallOption) (*CategoryBrandResponse, error)
	DeleteCategoryBrand(ctx context.Context, in *DeleteCategoryBrandInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCategoryBrand(ctx context.Context, in *UpdateCategoryBrandInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CategoryBrandList(ctx context.Context, in *CategoryBrandInfoRequest, opts ...grpc.CallOption) (*CategoryBrandListResponse, error)
	GetCategoryBrand(ctx context.Context, in *CategoryBrandRequest, opts ...grpc.CallOption) (*CategoryBrandResponse, error)
}

type categoryBrandClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryBrandClient(cc grpc.ClientConnInterface) CategoryBrandClient {
	return &categoryBrandClient{cc}
}

func (c *categoryBrandClient) CreateCategoryBrand(ctx context.Context, in *CreateCategoryBrandInfo, opts ...grpc.CallOption) (*CategoryBrandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryBrandResponse)
	err := c.cc.Invoke(ctx, CategoryBrand_CreateCategoryBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryBrandClient) DeleteCategoryBrand(ctx context.Context, in *DeleteCategoryBrandInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CategoryBrand_DeleteCategoryBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryBrandClient) UpdateCategoryBrand(ctx context.Context, in *UpdateCategoryBrandInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CategoryBrand_UpdateCategoryBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryBrandClient) CategoryBrandList(ctx context.Context, in *CategoryBrandInfoRequest, opts ...grpc.CallOption) (*CategoryBrandListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryBrandListResponse)
	err := c.cc.Invoke(ctx, CategoryBrand_CategoryBrandList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryBrandClient) GetCategoryBrand(ctx context.Context, in *CategoryBrandRequest, opts ...grpc.CallOption) (*CategoryBrandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryBrandResponse)
	err := c.cc.Invoke(ctx, CategoryBrand_GetCategoryBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryBrandServer is the server API for CategoryBrand service.
// All implementations must embed UnimplementedCategoryBrandServer
// for forward compatibility.
type CategoryBrandServer interface {
	// 分类
	CreateCategoryBrand(context.Context, *CreateCategoryBrandInfo) (*CategoryBrandResponse, error)
	DeleteCategoryBrand(context.Context, *DeleteCategoryBrandInfo) (*emptypb.Empty, error)
	UpdateCategoryBrand(context.Context, *UpdateCategoryBrandInfo) (*emptypb.Empty, error)
	CategoryBrandList(context.Context, *CategoryBrandInfoRequest) (*CategoryBrandListResponse, error)
	GetCategoryBrand(context.Context, *CategoryBrandRequest) (*CategoryBrandResponse, error)
	mustEmbedUnimplementedCategoryBrandServer()
}

// UnimplementedCategoryBrandServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCategoryBrandServer struct{}

func (UnimplementedCategoryBrandServer) CreateCategoryBrand(context.Context, *CreateCategoryBrandInfo) (*CategoryBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategoryBrand not implemented")
}
func (UnimplementedCategoryBrandServer) DeleteCategoryBrand(context.Context, *DeleteCategoryBrandInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategoryBrand not implemented")
}
func (UnimplementedCategoryBrandServer) UpdateCategoryBrand(context.Context, *UpdateCategoryBrandInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategoryBrand not implemented")
}
func (UnimplementedCategoryBrandServer) CategoryBrandList(context.Context, *CategoryBrandInfoRequest) (*CategoryBrandListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryBrandList not implemented")
}
func (UnimplementedCategoryBrandServer) GetCategoryBrand(context.Context, *CategoryBrandRequest) (*CategoryBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryBrand not implemented")
}
func (UnimplementedCategoryBrandServer) mustEmbedUnimplementedCategoryBrandServer() {}
func (UnimplementedCategoryBrandServer) testEmbeddedByValue()                       {}

// UnsafeCategoryBrandServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryBrandServer will
// result in compilation errors.
type UnsafeCategoryBrandServer interface {
	mustEmbedUnimplementedCategoryBrandServer()
}

func RegisterCategoryBrandServer(s grpc.ServiceRegistrar, srv CategoryBrandServer) {
	// If the following call pancis, it indicates UnimplementedCategoryBrandServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CategoryBrand_ServiceDesc, srv)
}

func _CategoryBrand_CreateCategoryBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryBrandInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryBrandServer).CreateCategoryBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryBrand_CreateCategoryBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryBrandServer).CreateCategoryBrand(ctx, req.(*CreateCategoryBrandInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryBrand_DeleteCategoryBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryBrandInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryBrandServer).DeleteCategoryBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryBrand_DeleteCategoryBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryBrandServer).DeleteCategoryBrand(ctx, req.(*DeleteCategoryBrandInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryBrand_UpdateCategoryBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryBrandInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryBrandServer).UpdateCategoryBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryBrand_UpdateCategoryBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryBrandServer).UpdateCategoryBrand(ctx, req.(*UpdateCategoryBrandInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryBrand_CategoryBrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryBrandInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryBrandServer).CategoryBrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryBrand_CategoryBrandList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryBrandServer).CategoryBrandList(ctx, req.(*CategoryBrandInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryBrand_GetCategoryBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryBrandServer).GetCategoryBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryBrand_GetCategoryBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryBrandServer).GetCategoryBrand(ctx, req.(*CategoryBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoryBrand_ServiceDesc is the grpc.ServiceDesc for CategoryBrand service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryBrand_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CategoryBrand",
	HandlerType: (*CategoryBrandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCategoryBrand",
			Handler:    _CategoryBrand_CreateCategoryBrand_Handler,
		},
		{
			MethodName: "DeleteCategoryBrand",
			Handler:    _CategoryBrand_DeleteCategoryBrand_Handler,
		},
		{
			MethodName: "UpdateCategoryBrand",
			Handler:    _CategoryBrand_UpdateCategoryBrand_Handler,
		},
		{
			MethodName: "CategoryBrandList",
			Handler:    _CategoryBrand_CategoryBrandList_Handler,
		},
		{
			MethodName: "GetCategoryBrand",
			Handler:    _CategoryBrand_GetCategoryBrand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "category_brand.proto",
}
